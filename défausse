

#class defaut 

"""Implémentation de la classe Defausse."""

from reserve import Reserve
from base import _ListeCartes
import random


class Defausse(_ListeCartes):
    """Vide la défausse en transférant toutes ses cartes dans la réserve,
    après les avoir mélangées.

    Parameters
    ----------
    reserve : Reserve
             La réserve où ajouter les cartes.

    """

    def __init__(self, cartes):
        """Cette fonction permet d'initialiser la défausse"""
        super().__init__(cartes)

    def vider(self, reserve):
        """Cette fonction permet de vider la défausse et de
        l'ajouter à la fin de la réserve
        après l'avoir mélangée.
        Ainsi,"""

        if not isinstance(reserve, Reserve):
            raise ValueError("La reserve n'est pas valide car ce n'est pas une Reserve")
        random.shuffle(self.__cartes)

        for i in range(len(self.__cartes)):
            reserve.ajouter_carte(self.retirer_carte(0))

# test défausse 

"""Implémentation des tests pour la classe Defausse."""

import pytest
from carte import Carte
from defausse import Defausse
from collections import Counter
from reserve import Reserve


@pytest.mark.parametrize(
    "param, resultat_voulu",
    [
        ([], []),
        ([Carte("Dame", "Trêfle"), Carte("Dame", "Trêfle")]),
        (
            [Carte("Dame", "Trêfle"), Carte("Roi", "Trêfle")],
            [Carte("Dame", "Trêfle"), Carte("Roi", "Trêfle")],
        ),
    ],
)
def test_defausse_init(param, resultat_voulu):
    """Teste que vider() lève une erreur si le paramètre n'est pas une Reserve."""
    defausse = Defausse(param)
    assert defausse._Listecarte__cartes == resultat_voulu


@pytest.mark.parametrize(
    "defausse_init, reserve_init, resultat_union_voulu",  # Corrigé ici
    [
        ([], [], []),
        ([Carte("As", "Pique")], [], [Carte("As", "Pique")]),
        ([], [Carte("As", "Pique")], [Carte("As", "Pique")]),
        (
            [Carte("As", "Pique")],
            [Carte("7", "Coeur")],
            [Carte("As", "Pique"), Carte("7", "Coeur")],
        ),
        (
            [Carte("5", "Trêfle")],
            [Carte("2", "Coeur")],
            [Carte("5", "Trêfle"), Carte("2", "Coeur")],
        ),
    ],
)
def test_defausse_vider(defausse_init, reserve_init, resultat_union_voulu):
    defausse = Defausse(defausse_init)
    reserve = Reserve(reserve_init)
    defausse.vider(reserve)
    assert len(defausse == 0)
    nouvelle_reserve = reserve._ListeCartes__cartes
    assert Counter(nouvelle_reserve) == Counter(resultat_union_voulu)
