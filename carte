"""Implémentation de la classe Carte."""


class Carte:
    """Cette classe permet d'afficher de manière particulière les cartes du jeu
    Parameters
    ----------

    Valeur : __valeur
    Toutes les valeurs que les cartes peuvent prendre.

    Couleur : __couleur
    Tous les symboles que peuvent prendre les cartes.

    """

    __VALEURS = (
        "As",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "Valet",
        "Dame",
        "Roi",
    )
    __COULEURS = ("Pique", "Coeur", "Carreau", "Trêfle")

    def __init__(self, valeur, couleur):
        if not isinstance(valeur, str):
            raise TypeError("La valeur doit être une chaine de caractères.")
        if not isinstance(couleur, str):
            raise TypeError("La couleur doit être une chaine de caractères.")

        if valeur not in self.__VALEURS:
            raise ValueError("La valeur doit être une des valeurs valides.")
        if couleur not in self.__COULEURS:
            raise ValueError("La couleur doit être une des couleurs valides.")

        self.__valeur = valeur
        self.__couleur = couleur

    @property
    def valeur(self):
        return self.__valeur

    @property
    def couleur(self):
        return self.__couleur

    @classmethod
    def VALEURS(cls):
        """Retourne les valeurs possibles des cartes."""
        return cls.__VALEURS

    @classmethod
    def COULEURS(cls):
        """Retourne les couleurs possibles des cartes."""
        return cls.__COULEURS

    def __str__(self):
        return f"{self.__valeur} de {self.__couleur}"

    def __repr__(self):
        """Renvoie la représentation officielle d'une carte."""
        return f"Carte('{self.__valeur}', '{self.__couleur}')"

    def __eq__(self, autre_carte):
        """Renvoie un booléen indiquant si la carte est égale à un autre objet."""
        if not isinstance(autre_carte, Carte):
            return False
        return (
            self.__valeur == autre_carte.__valeur
            and self.__couleur == autre_carte.__couleur
        )

    def __hash__(self):
        """Permet de rendre les cartes hashables."""
        return hash(repr(self))



  # test carte 
  """Implémentation des tests pour la classe Carte."""

from carte import Carte
import pytest


@pytest.mark.parametrize(
    "valeur, couleur, message_erreur",
    [
        # Nous allons traiter tous les cas ! :
        # 1er cas : la valeur n'est pas une chaîne de caractères
        (345, "Coeur", "La valeur doit être une chaine de caractères."),
        ({"valeur": "Vert"}, "Trêfle", "La valeur doit être une chaine de caractères."),
        # 2ème cas : la couleur n'est pas une chaîne de caractères
        ("As", 13579, "La couleur doit être une chaine de caractères."),
        ("As", ["Coeur"], "La couleur doit être une chaine de caractères."),
        # 3ème cas : la valeur n'est pas valide
        ("10", "Bleu", "La couleur doit être une des couleurs valides."),
        # 4ème : la couleur n'est pas valide
        ("As", "Rose", "La couleur doit être une des couleurs valides."),
    ],
)
def test_carte_init(valeur, couleur, message_erreur):
    with pytest.raises((TypeError, ValueError), match=message_erreur):
        Carte(valeur, couleur)


@pytest.mark.parametrize(
    "valeur, couleur, str_voulu",
    [
        ("As", "Pique", "As de Pique"),
        ("10", "Coeur", "10 de Coeur"),
        ("Valet", "Carreau", "Valet de Carreau"),
        ("Roi", "Trêfle", "Roi de Trêfle"),
        ("Dame", "Coeur", "Dame de Coeur"),
    ],
)
def test_str(valeur, couleur, str_voulu):
    carte = Carte(valeur, couleur)
    assert str(carte) == str_voulu


@pytest.mark.parametrize(
    "valeur, couleur, repr_voulu",
    [
        ("As", "Pique", "Carte('As', 'Pique')"),
        ("10", "Coeur", "Carte('10', 'Coeur')"),
        ("Valet", "Carreau", "Carte('Valet', 'Carreau')"),
        ("Roi", "Trêfle", "Carte('Roi', 'Trêfle')"),
        ("Dame", "Coeur", "Carte('Dame', 'Coeur')"),
    ],
)
def test_repr(valeur, couleur, repr_voulu):
    carte = Carte(valeur, couleur)
    assert repr(carte) == repr_voulu


@pytest.mark.parametrize(
    "valeur1, couleur1, valeur2, couleur2, resultat_voulu",
    [
        ("Roi", "Pique", "Roi", "Pique", True),
        ("10", "Coeur", "10", "Coeur", True),
        ("Valet", "Carreau", "Dame", "Carreau", False),
        ("Roi", "Trêfle", "Roi", "Coeur", False),
        ("Dame", "Coeur", "Dame", "Coeur", True),
    ],
)
def test_eq(valeur1, couleur1, valeur2, couleur2, resultat_voulu):
    carte1 = Carte(valeur1, couleur1)
    carte2 = Carte(valeur2, couleur2)
    assert (carte1 == carte2) == resultat_voulu


@pytest.mark.parametrize(
    "valeur1, couleur1, valeur2, couleur2, meme_hash",
    [
        ("As", "Pique", "As", "Pique", True),
        ("10", "Coeur", "10", "Coeur", True),
        ("Valet", "Carreau", "Dame", "Carreau", False),
        ("Roi", "Trêfle", "Roi", "Coeur", False),
        ("Dame", "Coeur", "Dame", "Coeur", True),
    ],
)
def test_hash(valeur1, couleur1, valeur2, couleur2, meme_hash):
    carte1 = Carte(valeur1, couleur1)
    carte2 = Carte(valeur2, couleur2)
    assert (hash(carte1) == hash(carte2)) == meme_hash
